'use client';

import { useState, useEffect } from 'react';

export default function YKBuddySeasonalBanner() {
  const [isHovered, setIsHovered] = useState(false);
  const [currentSeason, setCurrentSeason] = useState<'winter' | 'spring' | 'summer' | 'fall'>('winter');
  const [temperature, setTemperature] = useState<number>(-30); // Mock temperature, can be connected to weather API

  // Detect current season based on month - Yellowknife seasons
  useEffect(() => {
    const now = new Date();
    const month = now.getMonth() + 1; // 1-12

    console.log('Season Detection - Current month:', month);

    if (month === 12 || month === 1 || month === 2 || month === 3) {
      setCurrentSeason('winter'); // Dec, Jan, Feb, Mar - Long Yellowknife winter
      setTemperature(-30 - Math.floor(Math.random() * 15)); // -30 to -45°C
      console.log('Setting season: WINTER');
    } else if (month === 4 || month === 5) {
      setCurrentSeason('spring'); // Apr, May - Ice breakup season
      setTemperature(-5 + Math.floor(Math.random() * 15)); // -5 to +10°C
      console.log('Setting season: SPRING');
    } else if (month === 6 || month === 7 || month === 8) {
      setCurrentSeason('summer'); // Jun, Jul, Aug - Midnight sun
      setTemperature(15 + Math.floor(Math.random() * 12)); // +15 to +27°C
      console.log('Setting season: SUMMER');
    } else {
      setCurrentSeason('fall'); // Sep, Oct, Nov - Autumn colors
      setTemperature(-5 + Math.floor(Math.random() * 15)); // -5 to +10°C
      console.log('Setting season: FALL');
    }
  }, []);

  // WINTER: -40°C, Aurora Borealis, Ice Roads, Crisp Darkness
  const WinterBanner = () => {
    const [auroraPhase, setAuroraPhase] = useState(0);
    const [snowflakes, setSnowflakes] = useState<Array<{id: number; left: number; delay: number; duration: number; size: number}>>([]);

    useEffect(() => {
      const interval = setInterval(() => {
        setAuroraPhase(prev => (prev + 1) % 360);
      }, 50);
      return () => clearInterval(interval);
    }, []);

    useEffect(() => {
      if (isHovered) {
        const flakes = Array.from({ length: 60 }, (_, i) => ({
          id: i,
          left: Math.random() * 100,
          delay: Math.random() * 4,
          duration: 4 + Math.random() * 4,
          size: 0.5 + Math.random() * 1.5
        }));
        setSnowflakes(flakes);
      } else {
        setSnowflakes([]);
      }
    }, [isHovered]);

    return (
      <>
        {/* Desktop - Full Robbie Craig Style */}
        <div className="hidden md:block relative w-full h-64 overflow-hidden">
          {/* Deep winter night sky - rich indigo and violet */}
          <div className="absolute inset-0 bg-gradient-to-b from-indigo-950 via-indigo-900 to-slate-900">
            {/* Atmospheric depth - layered gradients for dimension */}
            <div className="absolute inset-0 bg-gradient-to-br from-purple-900/30 via-transparent to-blue-900/40"></div>

            {/* Aurora Borealis - Dynamic, flowing ribbons inspired by Craig's dramatic skies */}
            <div className="absolute inset-0 overflow-hidden">
              {/* Primary aurora wave - emerald green */}
              <div
                className="absolute w-full h-96 transition-opacity duration-1000"
                style={{
                  top: '-10%',
                  background: `radial-gradient(ellipse 120% 100% at 50% ${30 + Math.sin(auroraPhase * 0.02) * 15}%,
                    rgba(16, 185, 129, 0.7) 0%,
                    rgba(52, 211, 153, 0.5) 25%,
                    rgba(110, 231, 183, 0.3) 50%,
                    transparent 70%)`,
                  filter: 'blur(40px)',
                  transform: `translateY(${Math.sin(auroraPhase * 0.015) * 20}px)`,
                  opacity: 0.8 + Math.sin(auroraPhase * 0.03) * 0.2
                }}
              />

              {/* Secondary aurora - violet/pink accents */}
              <div
                className="absolute w-full h-96"
                style={{
                  top: '5%',
                  left: `${Math.sin(auroraPhase * 0.01) * 10}%`,
                  background: `radial-gradient(ellipse 100% 80% at 50% 40%,
                    rgba(167, 139, 250, 0.6) 0%,
                    rgba(196, 181, 253, 0.4) 30%,
                    rgba(233, 213, 255, 0.2) 50%,
                    transparent 70%)`,
                  filter: 'blur(35px)',
                  transform: `translateY(${Math.cos(auroraPhase * 0.018) * 15}px) scale(${1 + Math.sin(auroraPhase * 0.02) * 0.1})`,
                  opacity: 0.7
                }}
              />

              {/* Tertiary aurora - cyan highlights */}
              <div
                className="absolute w-full h-80"
                style={{
                  top: '15%',
                  right: `${Math.cos(auroraPhase * 0.012) * 8}%`,
                  background: `radial-gradient(ellipse 90% 70% at 60% 45%,
                    rgba(34, 211, 238, 0.5) 0%,
                    rgba(103, 232, 249, 0.3) 35%,
                    transparent 65%)`,
                  filter: 'blur(30px)',
                  transform: `translateY(${Math.sin(auroraPhase * 0.022) * 18}px)`,
                  opacity: 0.65
                }}
              />
            </div>

            {/* Diamond dust / Falling snow */}
            {snowflakes.map(flake => (
              <div
                key={flake.id}
                className="absolute rounded-full bg-white animate-fall"
                style={{
                  left: `${flake.left}%`,
                  top: '-20px',
                  width: `${flake.size * 3}px`,
                  height: `${flake.size * 3}px`,
                  animationDelay: `${flake.delay}s`,
                  animationDuration: `${flake.duration}s`,
                  opacity: 0.7 + flake.size * 0.2,
                  boxShadow: `0 0 ${flake.size * 4}px rgba(255,255,255,0.9)`
                }}
              />
            ))}

            {/* Distant stars - twinkling */}
            {[...Array(40)].map((_, i) => (
              <div
                key={i}
                className="absolute rounded-full bg-white"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 50}%`,
                  width: `${1 + Math.random() * 2}px`,
                  height: `${1 + Math.random() * 2}px`,
                  opacity: 0.4 + Math.random() * 0.6,
                  animation: `twinkle ${2 + Math.random() * 3}s ease-in-out infinite`,
                  animationDelay: `${Math.random() * 3}s`,
                  boxShadow: '0 0 2px rgba(255,255,255,0.8)'
                }}
              />
            ))}

            {/* Great Slave Lake ice - Textured frozen surface with pressure ridges */}
            <div className="absolute bottom-0 left-0 right-0 h-32">
              <svg viewBox="0 0 1920 200" className="w-full h-full" preserveAspectRatio="none">
                <defs>
                  <linearGradient id="iceGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" stopColor="#dbeafe" stopOpacity="0.3" />
                    <stop offset="40%" stopColor="#bfdbfe" stopOpacity="0.5" />
                    <stop offset="100%" stopColor="#93c5fd" stopOpacity="0.7" />
                  </linearGradient>
                  <linearGradient id="snowGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" stopColor="#f0f9ff" stopOpacity="0.9" />
                    <stop offset="100%" stopColor="#e0f2fe" stopOpacity="0.6" />
                  </linearGradient>
                </defs>

                {/* Ice surface with pressure ridges */}
                <path
                  d="M0,50 Q200,45 400,52 T800,48 T1200,54 T1600,49 T1920,52 L1920,200 L0,200 Z"
                  fill="url(#iceGradient)"
                  stroke="#bfdbfe"
                  strokeWidth="2"
                  opacity="0.8"
                />

                {/* Snow drifts on ice */}
                <path
                  d="M0,70 Q150,65 300,72 T600,68 T900,75 T1200,70 T1500,73 T1920,71 L1920,200 L0,200 Z"
                  fill="url(#snowGradient)"
                  opacity="0.7"
                />

                {/* Foreground snow bank */}
                <path
                  d="M0,120 Q100,110 200,118 T400,115 T600,122 T800,117 T1000,124 T1200,119 T1400,125 T1600,121 T1920,123 L1920,200 L0,200 Z"
                  fill="#f8fafc"
                  opacity="0.9"
                />
              </svg>
            </div>

            {/* Distant treeline - Dark silhouettes */}
            <div className="absolute bottom-32 left-0 right-0 h-20 flex items-end justify-around px-10 opacity-70">
              {[...Array(25)].map((_, i) => (
                <div
                  key={i}
                  className="relative"
                  style={{
                    width: '3px',
                    height: `${20 + Math.random() * 30}px`,
                    background: 'linear-gradient(to top, #0f172a, #1e293b)',
                    transform: `translateY(${Math.random() * 5}px)`,
                    opacity: 0.6 + Math.random() * 0.3
                  }}>
                  {/* Tree top */}
                  <div
                    className="absolute -top-2 left-1/2 -translate-x-1/2 w-0 h-0"
                    style={{
                      borderLeft: '4px solid transparent',
                      borderRight: '4px solid transparent',
                      borderBottom: '8px solid #1e293b',
                      opacity: 0.8
                    }}
                  />
                </div>
              ))}
            </div>

            {/* Temperature Display - Top Left */}
            <div className="absolute top-6 left-6 bg-slate-900/80 backdrop-blur-sm px-6 py-3 rounded-xl border-2 border-emerald-400/50 z-20">
              <div className="text-4xl font-black text-emerald-300">
                {temperature}°C
              </div>
              <div className="text-xs text-cyan-200 font-semibold mt-1">
                Right Now
              </div>
            </div>

            {/* Logo - Bold, clear against winter night */}
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <h1
                className="text-8xl font-black tracking-tight text-white relative z-10"
                style={{
                  textShadow: `
                    0 0 40px rgba(16, 185, 129, 0.6),
                    0 0 80px rgba(52, 211, 153, 0.4),
                    4px 4px 0px rgba(15, 23, 42, 0.8),
                    8px 8px 20px rgba(0, 0, 0, 0.5)
                  `,
                  filter: isHovered ? 'brightness(1.2)' : 'brightness(1)',
                  transition: 'filter 0.5s ease',
                  letterSpacing: '0.05em'
                }}>
                YK <span className="text-emerald-300">BUDDY</span>
              </h1>
              <div
                className="mt-3 text-base font-semibold text-cyan-100 tracking-wide opacity-90"
                style={{
                  textShadow: '0 0 20px rgba(16, 185, 129, 0.5)'
                }}>
                Your Yellowknife personalized companion
              </div>
            </div>

            {/* Atmospheric vignette */}
            <div className="absolute inset-0 bg-gradient-to-t from-slate-900/40 via-transparent to-indigo-950/30 pointer-events-none"></div>
          </div>
        </div>

        {/* Mobile - Simplified but atmospheric */}
        <div className="md:hidden relative w-full py-12 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-b from-indigo-950 via-indigo-900 to-slate-900">
            {/* Aurora glow */}
            <div
              className="absolute inset-0"
              style={{
                background: 'radial-gradient(ellipse at center top, rgba(16, 185, 129, 0.4) 0%, transparent 60%)',
                filter: 'blur(30px)'
              }}
            />
            {/* Stars */}
            {[...Array(20)].map((_, i) => (
              <div
                key={i}
                className="absolute w-1 h-1 bg-white rounded-full"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 60}%`,
                  opacity: 0.4 + Math.random() * 0.4,
                  animation: `twinkle ${2 + Math.random() * 2}s ease-in-out infinite`
                }}
              />
            ))}
          </div>
          <div className="relative z-10 text-center">
            <h1
              className="text-5xl font-black text-white tracking-tight"
              style={{
                textShadow: '0 0 30px rgba(16, 185, 129, 0.7), 3px 3px 0px rgba(15, 23, 42, 0.8)'
              }}>
              YK <span className="text-emerald-300">BUDDY</span>
            </h1>
          </div>
        </div>
      </>
    );
  };

  // SPRING: Ice Breakup, Returning Birds, Midnight Twilight, Thaw
  const SpringBanner = () => {
    const [thawProgress, setThawProgress] = useState(0);
    const [birds, setBirds] = useState<Array<{id: number; x: number; y: number; delay: number}>>([]);

    useEffect(() => {
      if (isHovered && thawProgress < 100) {
        const interval = setInterval(() => {
          setThawProgress(prev => Math.min(prev + 2, 100));
        }, 50);
        return () => clearInterval(interval);
      }
    }, [isHovered, thawProgress]);

    useEffect(() => {
      if (isHovered) {
        const birdList = Array.from({ length: 12 }, (_, i) => ({
          id: i,
          x: Math.random() * 80 + 10,
          y: Math.random() * 30 + 10,
          delay: i * 0.4
        }));
        setBirds(birdList);
      } else {
        setBirds([]);
      }
    }, [isHovered]);

    return (
      <>
        {/* Desktop */}
        <div className="hidden md:block relative w-full h-64 overflow-hidden">
          {/* Spring sky - Warm twilight blues and pinks */}
          <div className="absolute inset-0">
            <div className="absolute inset-0 bg-gradient-to-b from-sky-400 via-blue-300 to-blue-400"></div>

            {/* Atmospheric layers - Craig's signature atmospheric depth */}
            <div className="absolute inset-0 bg-gradient-to-br from-pink-300/40 via-transparent to-orange-200/30"></div>
            <div className="absolute inset-0 bg-gradient-to-t from-blue-400/50 via-transparent to-sky-300/40"></div>

            {/* Sun - Warm spring sun breaking through */}
            <div className="absolute top-12 right-40">
              <div
                className="w-28 h-28 rounded-full relative"
                style={{
                  background: 'radial-gradient(circle, #fef08a 0%, #fde047 40%, #facc15 70%, #f59e0b 100%)',
                  boxShadow: `
                    0 0 60px rgba(250, 204, 21, 0.8),
                    0 0 120px rgba(251, 191, 36, 0.5),
                    0 0 180px rgba(245, 158, 11, 0.3)
                  `,
                  transform: isHovered ? 'scale(1.05)' : 'scale(1)',
                  transition: 'transform 0.7s ease'
                }}>
                {/* Sun rays */}
                {[...Array(12)].map((_, i) => (
                  <div
                    key={i}
                    className="absolute top-1/2 left-1/2 origin-center"
                    style={{
                      width: '4px',
                      height: '35px',
                      background: 'linear-gradient(to bottom, rgba(254, 240, 138, 0.9), transparent)',
                      transform: `translate(-50%, -50%) rotate(${i * 30}deg) translateY(-55px)`,
                      borderRadius: '2px',
                      opacity: 0.7
                    }}
                  />
                ))}
                {/* Inner glow */}
                <div className="absolute inset-4 rounded-full bg-gradient-to-br from-yellow-100 to-yellow-300 opacity-80"></div>
              </div>
            </div>

            {/* Migrating birds */}
            {birds.map(bird => (
              <div
                key={bird.id}
                className="absolute"
                style={{
                  left: `${bird.x}%`,
                  top: `${bird.y}%`,
                  animation: `fly 3s ease-in-out infinite`,
                  animationDelay: `${bird.delay}s`
                }}>
                <svg width="40" height="24" viewBox="0 0 40 24">
                  <path
                    d="M4,12 Q10,6 20,12 Q30,6 36,12"
                    stroke="#1e293b"
                    strokeWidth="2.5"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </div>
            ))}

            {/* Ice breakup on Great Slave Lake */}
            <div className="absolute bottom-0 left-0 right-0 h-36 bg-gradient-to-b from-blue-400 via-blue-500 to-blue-600">
              {/* Open water */}
              <div className="absolute inset-0 bg-gradient-to-br from-cyan-400/30 via-blue-500/40 to-blue-600/50"></div>

              {/* Floating ice chunks - Dynamic positioning based on thaw */}
              <div className="absolute inset-0 flex items-center justify-around px-8">
                {[...Array(12)].map((_, i) => (
                  <div
                    key={i}
                    className="relative transition-all duration-700"
                    style={{
                      width: `${40 + i * 5}px`,
                      height: `${30 + i * 3}px`,
                      background: 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 50%, #bae6fd 100%)',
                      clipPath: 'polygon(10% 0%, 90% 0%, 100% 80%, 70% 100%, 30% 100%, 0% 80%)',
                      transform: isHovered
                        ? `translateY(${10 + i * 2}px) translateX(${(i - 6) * 3}px) rotate(${i * 15 - 90}deg) scale(${1 - thawProgress * 0.005})`
                        : `rotate(${i * 10 - 50}deg)`,
                      transitionDelay: `${i * 0.1}s`,
                      opacity: 1 - thawProgress * 0.006,
                      boxShadow: '0 4px 10px rgba(59, 130, 246, 0.3), inset 0 2px 4px rgba(255, 255, 255, 0.5)',
                      border: '2px solid rgba(191, 219, 254, 0.8)'
                    }}
                  />
                ))}
              </div>

              {/* Water reflections */}
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer"></div>
            </div>

            {/* Emerging shoreline */}
            <div className="absolute bottom-36 left-0 right-0 h-12">
              <svg viewBox="0 0 1920 80" className="w-full h-full" preserveAspectRatio="none">
                <path
                  d="M0,40 Q200,30 400,45 T800,35 T1200,48 T1600,38 T1920,43 L1920,80 L0,80 Z"
                  fill="#78350f"
                  opacity="0.8"
                />
                <path
                  d="M0,50 Q150,45 300,52 T600,48 T900,54 T1200,50 T1500,55 T1920,52 L1920,80 L0,80 Z"
                  fill="#92400e"
                  opacity="0.9"
                />
              </svg>
            </div>

            {/* Spring trees awakening */}
            <div className="absolute bottom-44 left-0 right-0 flex justify-around px-12">
              {[...Array(10)].map((_, i) => (
                <div
                  key={i}
                  className="relative transition-all duration-700"
                  style={{
                    opacity: isHovered ? 1 : 0.6,
                    transform: isHovered ? 'scale(1) translateY(0)' : 'scale(0.9) translateY(5px)',
                    transitionDelay: `${i * 0.1}s`
                  }}>
                  <svg width="20" height="50" viewBox="0 0 20 50">
                    {/* Trunk */}
                    <rect x="8" y="20" width="4" height="30" fill="#78350f" opacity="0.9"/>
                    {/* Emerging green */}
                    <circle cx="10" cy="18" r="6" fill="#22c55e" opacity="0.7"/>
                    <circle cx="7" cy="22" r="4" fill="#16a34a" opacity="0.8"/>
                    <circle cx="13" cy="22" r="4" fill="#4ade80" opacity="0.7"/>
                  </svg>
                </div>
              ))}
            </div>

            {/* Logo */}
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <h1
                className="text-8xl font-black text-slate-800 relative z-10"
                style={{
                  textShadow: `
                    3px 3px 0px rgba(255, 255, 255, 0.9),
                    6px 6px 0px rgba(147, 197, 253, 0.4),
                    2px 2px 30px rgba(56, 189, 248, 0.5)
                  `,
                  letterSpacing: '0.03em'
                }}>
                YK <span className="text-emerald-600">BUDDY</span>
              </h1>
              <div className="mt-4 text-sm font-bold text-slate-700 tracking-[0.3em] uppercase">
                Spring Breakup
              </div>
            </div>

            {/* Atmospheric overlay */}
            <div className="absolute inset-0 bg-gradient-to-t from-blue-500/20 via-transparent to-sky-300/20 pointer-events-none"></div>
          </div>
        </div>

        {/* Mobile */}
        <div className="md:hidden relative w-full py-12 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-b from-sky-400 via-blue-300 to-blue-400">
            <div className="absolute inset-0 bg-gradient-to-br from-pink-300/30 via-transparent to-orange-200/20"></div>
            <div className="absolute top-6 right-10">
              <div className="w-20 h-20 rounded-full"
                   style={{
                     background: 'radial-gradient(circle, #fef08a, #facc15)',
                     boxShadow: '0 0 40px rgba(250, 204, 21, 0.7)'
                   }}
              />
            </div>
          </div>
          <div className="relative z-10 text-center">
            <h1 className="text-5xl font-black text-slate-800"
                style={{
                  textShadow: '2px 2px 0px rgba(255, 255, 255, 0.9), 1px 1px 20px rgba(56, 189, 248, 0.5)'
                }}>
              YK <span className="text-emerald-600">BUDDY</span>
            </h1>
          </div>
        </div>
      </>
    );
  };

  // SUMMER: Midnight Sun, Wildflowers, Vibrant Life, 24hr Daylight
  const SummerBanner = () => {
    const [sunRotation, setSunRotation] = useState(0);
    const [lakeRipples, setLakeRipples] = useState<Array<{id: number; x: number; y: number}>>([]);

    useEffect(() => {
      const interval = setInterval(() => {
        setSunRotation(prev => (prev + 0.3) % 360);
      }, 30);
      return () => clearInterval(interval);
    }, []);

    useEffect(() => {
      if (isHovered) {
        const rippleInterval = setInterval(() => {
          setLakeRipples(prev => {
            const newRipple = {
              id: Date.now() + Math.random(),
              x: 20 + Math.random() * 60,
              y: 75 + Math.random() * 20
            };
            return [...prev.slice(-6), newRipple];
          });
        }, 800);
        return () => clearInterval(rippleInterval);
      } else {
        setLakeRipples([]);
      }
    }, [isHovered]);

    return (
      <>
        {/* Desktop */}
        <div className="hidden md:block relative w-full h-64 overflow-hidden">
          {/* Summer sky - Vibrant warm golds and oranges of midnight sun */}
          <div className="absolute inset-0">
            <div className="absolute inset-0 bg-gradient-to-b from-amber-300 via-orange-300 to-yellow-400"></div>

            {/* Atmospheric warmth layers */}
            <div className="absolute inset-0 bg-gradient-to-br from-yellow-200/50 via-transparent to-orange-400/40"></div>
            <div className="absolute inset-0 bg-gradient-to-t from-amber-400/40 via-transparent to-yellow-300/30"></div>

            {/* Midnight Sun - Dominant, warm, never-setting */}
            <div className="absolute top-10 right-24">
              <div className="relative">
                {/* Outer glow/halo */}
                <div
                  className="absolute inset-0 rounded-full"
                  style={{
                    width: '200px',
                    height: '200px',
                    background: 'radial-gradient(circle, rgba(254, 243, 199, 0.6) 0%, rgba(253, 224, 71, 0.4) 30%, transparent 70%)',
                    filter: 'blur(30px)',
                    transform: `translate(-50px, -50px) scale(${1.2 + Math.sin(sunRotation * 0.05) * 0.1})`
                  }}
                />

                {/* Main sun body */}
                <div
                  className="relative w-36 h-36 rounded-full"
                  style={{
                    background: 'radial-gradient(circle at 30% 30%, #fef3c7 0%, #fde047 25%, #facc15 50%, #f59e0b 80%, #f97316 100%)',
                    boxShadow: `
                      0 0 80px rgba(251, 191, 36, 0.9),
                      0 0 140px rgba(249, 115, 22, 0.6),
                      0 0 200px rgba(234, 88, 12, 0.4),
                      inset -10px -10px 30px rgba(249, 115, 22, 0.5)
                    `,
                    transform: isHovered ? 'scale(1.08)' : 'scale(1)',
                    transition: 'transform 0.8s ease'
                  }}>

                  {/* Rotating sun rays */}
                  <div
                    className="absolute inset-0"
                    style={{transform: `rotate(${sunRotation}deg)`}}>
                    {[...Array(16)].map((_, i) => (
                      <div
                        key={i}
                        className="absolute top-1/2 left-1/2 origin-center"
                        style={{
                          width: '6px',
                          height: '50px',
                          background: 'linear-gradient(to bottom, rgba(254, 243, 199, 0.9) 0%, rgba(253, 224, 71, 0.6) 50%, transparent 100%)',
                          transform: `translate(-50%, -50%) rotate(${i * 22.5}deg) translateY(-85px)`,
                          borderRadius: '3px',
                          opacity: 0.7,
                          boxShadow: '0 0 10px rgba(251, 191, 36, 0.5)'
                        }}
                      />
                    ))}
                  </div>

                  {/* Inner bright core */}
                  <div className="absolute inset-8 rounded-full bg-gradient-to-br from-yellow-50 via-yellow-200 to-orange-300 opacity-90"></div>
                  <div className="absolute inset-14 rounded-full bg-gradient-to-br from-white via-yellow-100 to-yellow-200 opacity-80"></div>
                </div>
              </div>
            </div>

            {/* Wildflowers meadow - Vibrant summer blooms */}
            <div className="absolute bottom-20 left-0 right-0 flex justify-around px-8">
              {[
                {flower: '#ec4899', stem: '#22c55e', name: 'Fireweed'},
                {flower: '#a855f7', stem: '#16a34a', name: 'Lupine'},
                {flower: '#f59e0b', stem: '#22c55e', name: 'Dandelion'},
                {flower: '#ef4444', stem: '#15803d', name: 'Wild Rose'},
                {flower: '#3b82f6', stem: '#22c55e', name: 'Bluebells'},
                {flower: '#ec4899', stem: '#16a34a', name: 'Fireweed'},
                {flower: '#f59e0b', stem: '#22c55e', name: 'Buttercup'},
                {flower: '#a855f7', stem: '#15803d', name: 'Aster'},
                {flower: '#ef4444', stem: '#22c55e', name: 'Rose'},
                {flower: '#3b82f6', stem: '#16a34a', name: 'Forget-me-not'}
              ].map((flower, i) => (
                <div
                  key={i}
                  className="relative transition-all duration-500"
                  style={{
                    transform: isHovered ? `translateY(-12px) rotate(${(i - 5) * 6}deg)` : 'translateY(0)',
                    transitionDelay: `${i * 0.05}s`
                  }}>
                  {/* Stem */}
                  <div
                    className="w-2 h-16 rounded-full mx-auto"
                    style={{
                      background: `linear-gradient(to bottom, ${flower.stem}, #166534)`,
                      boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
                    }}
                  />
                  {/* Flower bloom */}
                  <div
                    className="w-12 h-12 rounded-full -mt-8 mx-auto relative"
                    style={{
                      background: `radial-gradient(circle at 30% 30%, ${flower.flower}, ${flower.flower}dd)`,
                      boxShadow: `0 4px 12px rgba(0,0,0,0.3), inset -2px -2px 6px rgba(0,0,0,0.2)`,
                      border: '3px solid rgba(255, 255, 255, 0.5)'
                    }}>
                    {/* Inner detail */}
                    <div className="absolute inset-2 rounded-full bg-white/40"></div>
                    <div className="absolute inset-4 rounded-full bg-yellow-200/60"></div>
                  </div>
                </div>
              ))}
            </div>

            {/* Great Slave Lake - Summer sparkle */}
            <div className="absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-b from-blue-400 via-blue-500 to-blue-600 overflow-hidden">
              {/* Water reflections and shimmer */}
              <div className="absolute inset-0">
                <div className="absolute inset-0 bg-gradient-to-r from-transparent via-cyan-300/40 to-transparent animate-shimmer"></div>
                <div className="absolute inset-0 bg-gradient-to-br from-cyan-400/20 via-blue-400/30 to-blue-500/40"></div>
              </div>

              {/* Ripples from hover */}
              {lakeRipples.map(ripple => (
                <div
                  key={ripple.id}
                  className="absolute rounded-full border-3 border-white/50 animate-ripple"
                  style={{
                    left: `${ripple.x}%`,
                    top: `${ripple.y}%`,
                    width: '10px',
                    height: '10px'
                  }}
                />
              ))}

              {/* Sunlight sparkles on water */}
              {[...Array(15)].map((_, i) => (
                <div
                  key={i}
                  className="absolute w-2 h-2 bg-yellow-200 rounded-full"
                  style={{
                    left: `${5 + i * 6}%`,
                    top: `${30 + Math.random() * 40}%`,
                    opacity: 0.5 + Math.random() * 0.5,
                    animation: `twinkle ${1 + Math.random() * 2}s ease-in-out infinite`,
                    animationDelay: `${Math.random() * 2}s`,
                    boxShadow: '0 0 8px rgba(254, 240, 138, 0.8)'
                  }}
                />
              ))}
            </div>

            {/* Green summer shoreline */}
            <div className="absolute bottom-20 left-0 right-0 h-8">
              <svg viewBox="0 0 1920 60" className="w-full h-full" preserveAspectRatio="none">
                <path
                  d="M0,30 Q240,20 480,35 T960,25 T1440,38 T1920,30 L1920,60 L0,60 Z"
                  fill="#16a34a"
                  opacity="0.9"
                />
                <path
                  d="M0,40 Q200,35 400,42 T800,38 T1200,45 T1600,40 T1920,43 L1920,60 L0,60 Z"
                  fill="#22c55e"
                  opacity="0.95"
                />
              </svg>
            </div>

            {/* Logo */}
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <h1
                className="text-8xl font-black text-orange-700 relative z-10"
                style={{
                  textShadow: `
                    3px 3px 0px rgba(254, 243, 199, 0.9),
                    6px 6px 0px rgba(251, 191, 36, 0.4),
                    2px 2px 30px rgba(249, 115, 22, 0.6)
                  `,
                  WebkitTextStroke: '1px rgba(234, 88, 12, 0.3)',
                  letterSpacing: '0.03em'
                }}>
                YK <span className="text-yellow-500">BUDDY</span>
              </h1>
              <div className="mt-4 text-sm font-bold text-orange-800 tracking-[0.3em] uppercase">
                Midnight Sun Season
              </div>
            </div>

            {/* Warm atmospheric overlay */}
            <div className="absolute inset-0 bg-gradient-to-t from-amber-400/20 via-transparent to-yellow-300/20 pointer-events-none"></div>
          </div>
        </div>

        {/* Mobile */}
        <div className="md:hidden relative w-full py-12 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-b from-amber-300 via-orange-300 to-yellow-400">
            <div className="absolute inset-0 bg-gradient-to-br from-yellow-200/40 via-transparent to-orange-400/30"></div>
            <div className="absolute top-6 right-10">
              <div className="w-20 h-20 rounded-full"
                   style={{
                     background: 'radial-gradient(circle, #fef3c7, #facc15)',
                     boxShadow: '0 0 60px rgba(251, 191, 36, 0.8)'
                   }}
              />
            </div>
          </div>
          <div className="relative z-10 text-center">
            <h1 className="text-5xl font-black text-orange-700"
                style={{
                  textShadow: '2px 2px 0px rgba(254, 243, 199, 0.9), 1px 1px 20px rgba(249, 115, 22, 0.5)'
                }}>
              YK <span className="text-yellow-500">BUDDY</span>
            </h1>
          </div>
        </div>
      </>
    );
  };

  // FALL: Autumn Gold, Migrating Geese, First Frost, Rich Colors
  const FallBanner = () => {
    const [leaves, setLeaves] = useState<Array<{id: number; color: string; left: number; delay: number; duration: number; rotation: number}>>([]);
    const [geesePosition, setGeesePosition] = useState(0);

    useEffect(() => {
      if (isHovered) {
        const leafColors = ['#dc2626', '#ea580c', '#f59e0b', '#eab308', '#d97706'];
        const newLeaves = Array.from({ length: 40 }, (_, i) => ({
          id: Date.now() + i,
          color: leafColors[Math.floor(Math.random() * leafColors.length)],
          left: Math.random() * 100,
          delay: Math.random() * 2,
          duration: 4 + Math.random() * 3,
          rotation: Math.random() * 360
        }));
        setLeaves(newLeaves);
      } else {
        setLeaves([]);
      }
    }, [isHovered]);

    useEffect(() => {
      const interval = setInterval(() => {
        setGeesePosition(prev => (prev + 0.5) % 120);
      }, 50);
      return () => clearInterval(interval);
    }, []);

    return (
      <>
        {/* Desktop */}
        <div className="hidden md:block relative w-full h-64 overflow-hidden">
          {/* Autumn sky - Rich warm oranges and deep blues of fall sunset */}
          <div className="absolute inset-0">
            <div className="absolute inset-0 bg-gradient-to-b from-orange-400 via-red-400 to-amber-500"></div>

            {/* Atmospheric depth - Craig's rich color layering */}
            <div className="absolute inset-0 bg-gradient-to-br from-yellow-400/40 via-transparent to-red-500/30"></div>
            <div className="absolute inset-0 bg-gradient-to-t from-amber-600/40 via-transparent to-orange-300/30"></div>

            {/* Sky gradient transition */}
            <div className="absolute top-0 left-0 right-0 h-32 bg-gradient-to-b from-orange-300/60 via-pink-300/40 to-transparent"></div>

            {/* Migrating geese in V-formation */}
            <div
              className="absolute top-16 left-0 right-0"
              style={{
                transform: `translateX(${geesePosition - 20}vw)`,
                transition: 'transform 50ms linear'
              }}>
              <svg width="300" height="100" viewBox="0 0 300 100" className="mx-auto">
                {/* V-formation of geese */}
                {[
                  {x: 150, y: 20},
                  {x: 130, y: 30}, {x: 170, y: 30},
                  {x: 110, y: 40}, {x: 190, y: 40},
                  {x: 90, y: 50}, {x: 210, y: 50},
                  {x: 70, y: 60}, {x: 230, y: 60},
                  {x: 50, y: 70}, {x: 250, y: 70}
                ].map((pos, i) => (
                  <g key={i} transform={`translate(${pos.x}, ${pos.y})`}>
                    <path
                      d="M-6,-3 Q0,-5 6,-3 M-6,3 Q0,1 6,3"
                      stroke="#1e293b"
                      strokeWidth="2.5"
                      fill="none"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </g>
                ))}
              </svg>
            </div>

            {/* Falling autumn leaves */}
            {leaves.map(leaf => (
              <div
                key={leaf.id}
                className="absolute animate-fall"
                style={{
                  left: `${leaf.left}%`,
                  top: '-40px',
                  animationDelay: `${leaf.delay}s`,
                  animationDuration: `${leaf.duration}s`,
                  transform: `rotate(${leaf.rotation}deg)`
                }}>
                <svg width="32" height="32" viewBox="0 0 32 32">
                  <path
                    d="M16,2 Q18,8 16,16 Q24,12 30,16 Q24,20 16,16 Q18,24 16,30 Q14,24 16,16 Q8,20 2,16 Q8,12 16,16 Q14,8 16,2 Z"
                    fill={leaf.color}
                    stroke="#78350f"
                    strokeWidth="1.5"
                    style={{
                      filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'
                    }}
                  />
                  {/* Leaf veins */}
                  <line x1="16" y1="6" x2="16" y2="26" stroke="#92400e" strokeWidth="1" opacity="0.6"/>
                  <line x1="16" y1="16" x2="10" y2="12" stroke="#92400e" strokeWidth="0.5" opacity="0.4"/>
                  <line x1="16" y1="16" x2="22" y2="12" stroke="#92400e" strokeWidth="0.5" opacity="0.4"/>
                </svg>
              </div>
            ))}

            {/* Autumn forest - Vibrant reds, oranges, and golds */}
            <div className="absolute bottom-24 left-0 right-0 flex justify-around px-8">
              {[
                ['#dc2626', '#ea580c', '#f59e0b'],
                ['#f59e0b', '#eab308', '#d97706'],
                ['#ea580c', '#dc2626', '#b91c1c'],
                ['#eab308', '#f59e0b', '#d97706'],
                ['#dc2626', '#b91c1c', '#991b1b'],
                ['#f59e0b', '#ea580c', '#dc2626'],
                ['#d97706', '#eab308', '#f59e0b'],
                ['#b91c1c', '#dc2626', '#ea580c'],
                ['#eab308', '#d97706', '#ca8a04'],
                ['#ea580c', '#f59e0b', '#eab308']
              ].map((colors, i) => (
                <svg key={i} width="50" height="100" viewBox="0 0 50 100"
                     className="transition-all duration-300"
                     style={{
                       transform: isHovered ? `scale(1.05)` : 'scale(1)',
                       transitionDelay: `${i * 0.05}s`
                     }}>
                  {/* Trunk - Textured bark */}
                  <rect x="20" y="50" width="10" height="50" fill="#78350f" stroke="#451a03" strokeWidth="2"/>
                  <line x1="22" y1="60" x2="22" y2="95" stroke="#92400e" strokeWidth="0.5" opacity="0.5"/>
                  <line x1="28" y1="55" x2="28" y2="90" stroke="#92400e" strokeWidth="0.5" opacity="0.5"/>

                  {/* Autumn foliage - Layered for depth */}
                  <circle cx="25" cy="30" r="18" fill={colors[0]} opacity="0.95"
                          style={{filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.3))'}}/>
                  <circle cx="17" cy="38" r="14" fill={colors[1]} opacity="0.95"
                          style={{filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.3))'}}/>
                  <circle cx="33" cy="38" r="14" fill={colors[2]} opacity="0.95"
                          style={{filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.3))'}}/>
                  <circle cx="25" cy="45" r="12" fill={colors[0]} opacity="0.9"
                          style={{filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.3))'}}/>

                  {/* Highlights for dimension */}
                  <circle cx="22" cy="28" r="6" fill="rgba(255,255,255,0.3)"/>
                </svg>
              ))}
            </div>

            {/* Frost-touched ground */}
            <div className="absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-b from-amber-700 via-amber-800 to-amber-900">
              <div className="absolute inset-0 bg-white/15"></div>
              <svg viewBox="0 0 1920 150" className="w-full h-full absolute bottom-0" preserveAspectRatio="none">
                <path
                  d="M0,60 Q240,50 480,65 T960,55 T1440,68 T1920,60 L1920,150 L0,150 Z"
                  fill="#92400e"
                  opacity="0.9"
                />
                <path
                  d="M0,80 Q200,70 400,85 T800,75 T1200,88 T1600,80 T1920,85 L1920,150 L0,150 Z"
                  fill="#78350f"
                  opacity="0.95"
                />
              </svg>

              {/* Frost crystals */}
              {[...Array(30)].map((_, i) => (
                <div
                  key={i}
                  className="absolute w-1 h-1 bg-blue-100 rounded-full"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    opacity: 0.6 + Math.random() * 0.4,
                    boxShadow: '0 0 3px rgba(191, 219, 254, 0.8)'
                  }}
                />
              ))}
            </div>

            {/* Logo */}
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <h1
                className="text-8xl font-black text-white relative z-10"
                style={{
                  textShadow: `
                    5px 5px 0px #78350f,
                    8px 8px 0px rgba(120, 53, 15, 0.5),
                    2px 2px 40px rgba(234, 88, 12, 0.7)
                  `,
                  WebkitTextStroke: '2px #78350f',
                  letterSpacing: '0.02em'
                }}>
                YK <span className="text-yellow-300">BUDDY</span>
              </h1>
              <div
                className="mt-4 text-sm font-bold text-amber-100 tracking-[0.3em] uppercase"
                style={{
                  textShadow: '0 0 20px rgba(234, 88, 12, 0.6), 2px 2px 0px #78350f'
                }}>
                Autumn Colors
              </div>
            </div>

            {/* Atmospheric overlay */}
            <div className="absolute inset-0 bg-gradient-to-t from-amber-900/30 via-transparent to-orange-400/20 pointer-events-none"></div>
          </div>
        </div>

        {/* Mobile */}
        <div className="md:hidden relative w-full py-12 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-b from-orange-400 via-red-400 to-amber-500">
            <div className="absolute inset-0 bg-gradient-to-br from-yellow-400/30 via-transparent to-red-500/20"></div>
          </div>
          <div className="relative z-10 text-center">
            <h1 className="text-5xl font-black text-white"
                style={{
                  textShadow: '3px 3px 0px #78350f, 1px 1px 20px rgba(234, 88, 12, 0.6)',
                  WebkitTextStroke: '1.5px #78350f'
                }}>
              YK <span className="text-yellow-300">BUDDY</span>
            </h1>
          </div>
        </div>
      </>
    );
  };

  const SeasonComponent = {
    winter: WinterBanner,
    spring: SpringBanner,
    summer: SummerBanner,
    fall: FallBanner
  }[currentSeason];

  return (
    <div
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}>
      <style jsx>{`
        @keyframes fall {
          0% { transform: translateY(0) rotate(0deg); opacity: 0; }
          10% { opacity: 1; }
          90% { opacity: 1; }
          100% { transform: translateY(280px) rotate(360deg); opacity: 0; }
        }
        @keyframes fly {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-12px); }
        }
        @keyframes ripple {
          0% { width: 10px; height: 10px; opacity: 0.8; }
          100% { width: 100px; height: 100px; opacity: 0; }
        }
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(200%); }
        }
        @keyframes twinkle {
          0%, 100% { opacity: 0.2; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.2); }
        }
        .animate-fall { animation: fall linear forwards; }
        .animate-fly { animation: fly 3s ease-in-out infinite; }
        .animate-ripple { animation: ripple 2.5s ease-out forwards; }
        .animate-shimmer { animation: shimmer 5s ease-in-out infinite; }
      `}</style>
      {SeasonComponent && <SeasonComponent />}
    </div>
  );
}
